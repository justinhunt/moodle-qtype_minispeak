{"version":3,"file":"itemtypechooser.min.js","sources":["../src/itemtypechooser.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/ //\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {get_string as getString} from 'core/str';\nimport {prefetchStrings} from 'core/prefetch';\n/**\n * Mini Speak Type Choose\n *\n * @module     qtype_minispeak/typechooser\n * @copyright  2023 Justin Hunt <justin@poodll.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      4.0\n */\n\nconst Selectors = {\n    fields: {\n        selector: '[data-itemtypechooser-field=\"selector\"]',\n        updateButton: '[data-itemtypechooser-field=\"updateButton\"]',\n        typeInstructions: '[data-itemtypechooser-field=\"typeInstructions\"]'\n    },\n};\n\n/**\n * Initialise the format chooser.\n */\nexport const init = () => {\n\n    prefetchStrings('qtype_minispeak', [\n        'multiaudio_instructions1',\n        'multichoice_instructions1',\n        'shortaudio_instructions1',\n        'smartframe_instructions1',\n        'listenrepeat_instructions1',\n        'dictation_instructions1',\n        'dictationchat_instructions1',\n        'speakinggapfill_instructions1',\n        'typinggapfill_instructions1',\n        'listeninggapfill_instructions1',\n        'comprehensionquiz_instructions1',\n        'buttonquiz_instructions1',\n        'page_instructions1'\n\n    ]);\n\n    document.querySelector(Selectors.fields.selector).addEventListener('change', e => {\n        const form = e.target.closest('form');\n        const updateButton = form.querySelector(Selectors.fields.updateButton);\n        const typeInstructions = form.querySelector(Selectors.fields.typeInstructions);\n        const fieldset = updateButton.closest('fieldset');\n\n        //set the form to update\n        const url = new URL(form.action);\n        url.hash = fieldset.id;\n        form.action = url.toString();\n\n        // Set the instructions for the selected type.\n        getString(e.target.value +'_instructions1', 'qtype_minispeak')\n            .then(function(theinstructions){\n                typeInstructions.value=theinstructions;\n                updateButton.click();\n            }\n        );\n    });\n};\n"],"names":["Selectors","selector","updateButton","typeInstructions","document","querySelector","addEventListener","e","form","target","closest","fieldset","url","URL","action","hash","id","toString","value","then","theinstructions","click"],"mappings":";;;;;;;;;MAyBMA,iBACM,CACJC,SAAU,0CACVC,aAAc,8CACdC,iBAAkB,iEAON,mCAEA,kBAAmB,CAC/B,2BACA,4BACA,2BACA,2BACA,6BACA,0BACA,8BACA,gCACA,8BACA,iCACA,kCACA,2BACA,uBAIJC,SAASC,cAAcL,iBAAiBC,UAAUK,iBAAiB,UAAUC,UACnEC,KAAOD,EAAEE,OAAOC,QAAQ,QACxBR,aAAeM,KAAKH,cAAcL,iBAAiBE,cACnDC,iBAAmBK,KAAKH,cAAcL,iBAAiBG,kBACvDQ,SAAWT,aAAaQ,QAAQ,YAGhCE,IAAM,IAAIC,IAAIL,KAAKM,QACzBF,IAAIG,KAAOJ,SAASK,GACpBR,KAAKM,OAASF,IAAIK,+BAGRV,EAAEE,OAAOS,MAAO,iBAAkB,mBACvCC,MAAK,SAASC,iBACXjB,iBAAiBe,MAAME,gBACvBlB,aAAamB"}